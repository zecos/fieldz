{"version":3,"sources":["../../node_modules/style-inject/dist/style-inject.es.js","../../src/fieldz.tsx","App.tsx","../../src/util.ts","reportWebVitals.ts","index.tsx"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","getClassName","props","addendum","className","name","kebab","error","key","toString","styles","handleKeyDown","onEnter","e","keyCode","errors","React.createElement","container","textLabel","title","textInput","value","state","onChange","handleChange","onKeyDown","onBlur","touched","setTouched","length","concat","map","App","newTodo","setState","setErrors","snake","camel","replace","kebabToSnake","match","trim","toLowerCase","titleToKebab","toUpperCase","validate","target","useText","val","useState","todos","setTodos","todo","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d2b123ca.chunk.js","sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import * as React from 'react'\nimport { camelToTitle, titleToKebab, kebabToSnake } from './util'\nimport styles from './fieldz.css'\n\ntype HookProps = {\n  name?: string,\n  validate?: (input: string) => Errors\n}\ntype Errors = string[] | string | void\n\ntype CE = React.ChangeEvent<HTMLInputElement>\ntype KBE = React.KeyboardEvent\n\nexport const useText = (props: HookProps = {}): FCProps => {\n  const [state, setState] = React.useState<string>(\"\")\n  const [errors, setErrors] = React.useState<Errors>([])\n  const [touched, setTouched] = React.useState<boolean>(false)\n  const handleChange = (e: CE) => {\n    if (props.validate) {\n      setErrors(props.validate(e.target.value))\n    }\n    setState(e.target.value)\n  }\n  let title = ''\n  let kebab = ''\n  let snake = ''\n  let camel = ''\n  if (props.name) {\n    camel = props.name\n    title = camelToTitle(camel)\n    kebab = titleToKebab(title)\n    snake = kebabToSnake(kebab)\n  }\n  return {\n    state,\n    setState,\n    handleChange,\n    name: {\n      camel,\n      title,\n      kebab,\n      snake,\n    },\n    errors,\n    setErrors,\n    touched,\n    setTouched,\n  }\n}\n\n\ntype FCProps = {\n  state: string\n  setState: React.Dispatch<React.SetStateAction<string>>\n  handleChange: (e:CE) => void\n  name?: {\n    title: string\n    kebab: string\n    camel: string\n    snake: string\n  }\n  className?: string\n  children?: React.ReactNode\n  onEnter?: (e: KBE) => void\n  errors?: Errors\n  setErrors?: React.Dispatch<React.SetStateAction<Errors>>\n  touched?: boolean\n  setTouched?: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst getClassName = (props: FCProps, addendum=\"\"): string => {\n  let className: string = props.className || ''\n  if (!className) {\n    className = 'fieldz-input' + addendum\n    if (props.name) {\n      className += `${className}-${props.name.kebab+addendum}`\n    }\n  }\n  return className\n}\n\nconst renderError = error => <div key={error.toString()} className={styles.error}>{error.toString()}</div>\n\nconst renderErrors = (errors: Errors) => {\n  if (typeof errors === \"undefined\" || !errors.length) {\n    return \"\"\n  }\n  // @ts-ignore\n  errors = [].concat(errors) as string[]\n  return (\n    <div className={styles.errors}>\n      {errors.map(renderError)}\n    </div>\n  )\n}\n\nexport const Text: React.FC<FCProps> = props => {\n  let handleKeyDown;\n  if (props.onEnter) {\n    handleKeyDown = (e: KBE) => {\n      if (e.keyCode === 13) {\n        props.onEnter!(e)\n      }\n    }\n  }\n  const handleBlur = () => {\n    if (!props.touched && props.setTouched) {\n      props.setTouched(true)\n    }\n  }\n  return (\n    <div className={`${styles.container} ${getClassName(props)}`}>\n      {!props.name ? \"\" : (\n        <>\n          <label className={`${styles.textLabel} ${getClassName(props, \"-label\")}`}>\n            {props.name.title}\n          </label>\n          <br />\n        </>\n      )}\n      <input\n        className={`${styles.textInput} ${getClassName(props, \"-input\")}`}\n        value={props.state}\n        onChange={props.handleChange}\n        onKeyDown={handleKeyDown}\n        onBlur={handleBlur}\n      />\n      {props.touched && renderErrors(props.errors || [])}\n    </div>\n  )\n}","import React, { useState } from 'react';\nimport { useText, Text } from 'fieldz'\nimport './App.scss';\n\nfunction App() {\n  const newTodo = useText({\n    name: 'newTodo',\n    validate: val => {\n      if (val.length < 3) {\n        return \"Must be at least 3 characters long.\"\n      }\n    }\n  })\n  const [todos, setTodos] = useState<string[]>([])\n  return (\n    <div className=\"App\">\n      <Text {...newTodo}\n        onEnter={() => {\n          setTodos([\n            ...todos,\n            newTodo.state\n          ])\n          newTodo.setState('')\n        }}/>\n      <ul>\n        {todos.map((todo, i) => <li key={i}>{todo}</li>)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// @ts-nocheck\nexport const camelToTitle = camelCase => camelCase\n  .replace(/([A-Z])/g, match => ` ${match}`)\n  .replace(/([0-9]+)/g, match => ` ${match}`)\n  .replace(/^./g, match => match.toUpperCase())\n  .trim()\n\nexport const titleToKebab = title => title\n  .replace(/ ([A-Z])/g, match => `-${match.trim()}`)\n  .toLowerCase()\n\n\nexport const kebabToSnake = (kebab: string) => kebab.replace(\"-\", \"_\")","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}